#########################################################
## DEPLOYMENT PIPELINE                                 ##
#########################################################
##
## This pipeline template contains the logic to deploy a given module's ARM template using the provided parameter file(s)
##
## Enabled levels of deployment
## - Resource-Group-Level
## - Subscription-Level
## - Management-Group-Level
## - Tenant-Level
##
########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |============================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                               |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|-------------------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure.                                                            | 'demo-internal'                                       |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on.                                       | 'Custom Deployment Pool'                              |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on.                                       | 'ubuntu20.04'                                         |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline.                                                                 | 120                                                   |
##   | removeDeployment                | 'true'                               | Set to [true] to flag resources for removal. If not provided, defaults to true.                           | 'true'                                                |
##   | templateFilePath                | ''                                   | Path to the template file to deploy.                                                                      | 'modules/analysis-services/servers/main.bicep'        |
##   | customTokens                    | ''                                   | Additional token pairs in json format.                                                                    | '{"tokenName":"tokenValue"}'                          |
##   | jobDisplayName                  | ''                                   | The display name of the job.                                                                              | 'Deploy module'                                       |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy.                                                                         | 'c:/KeyVault'                                         |
##   | location                        | '$(location)'                        | The location to deploy resources to.                                                                      | 'EastUs2'                                             |
##   | subscriptionId                  | '$(ARM_SUBSCRIPTION_ID)'             | The id of the subscription to deploy into when using a Management group service connection.               | 'aed7c000-6387-412e-bed0-24dfddf4bbc6'                |
##   | managementGroupId               | '$(ARM_MGMTGROUP_ID)'                | The id of the management group to deploy into. Required only for Management-Group-Level deployments.      | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'                |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'                     |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                               |
##   |============================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  # Logic-related parameters
  removeDeployment: false
  templateFilePath: ''
  customTokens: ''
  modulePath: '$(modulePath)'
  location: '$(location)'
  subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
  managementGroupId: '$(ARM_MGMTGROUP_ID)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - template: /.azuredevops/pipelineTemplates/jobs.getModuleTestFiles.yml
  - job: deploy
    displayName: 'Deploying ' # Auto-populated
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    dependsOn:
      - getModuleTestFiles
    strategy:
      matrix: $[ dependencies.getModuleTestFiles.outputs['getModuleTestFilesTask.moduleTests'] ]
    ##---------------------------------------------##
    ## TEMPLATE LOGIC                              ##
    ##---------------------------------------------##
    steps:
      # [Agent] Prepare environment
      #----------------------------
      - task: PowerShell@2
        displayName: 'Setup agent for deployment'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

            # Define PS modules to install on the runner
            $Modules = @(
                @{ Name = 'Az.Accounts' },
                @{ Name = 'Az.Resources' },
                @{ Name = 'powershell-yaml'; Version = '0.4.2'}
            )

            # Additional PS modules need to be installed for the removal step in case it is enabled
            if ('${{ parameters.removeDeployment}}' -eq 'true') {
              $Modules += @(
                @{ Name = 'Az.CognitiveServices' },
                @{ Name = 'Az.Compute' },
                @{ Name = 'Az.KeyVault' },
                @{ Name = 'Az.Monitor' },
                @{ Name = 'Az.OperationalInsights' },
                @{ Name = 'Az.RecoveryServices' }
              )
            }

            # Set agent up
            Set-EnvironmentOnAgent -PSModules $Modules

      # [Agent] Replace tokens
      #-----------------------
      - task: AzurePowerShell@5
        displayName: 'Replace tokens in template file via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          ScriptType: InlineScript
          pwsh: true
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFileList.ps1')

            # Get target files
            $moduleTestFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' '$(moduleTestFilePath)'
            $targetFileList = @($moduleTestFilePath)

            # Construct Token Function Input
            $ConvertTokensInputs = @{
                FilePathList = $targetFileList
                Tokens       = @{}
                TokenPrefix  = '$(tokenPrefix)'
                TokenSuffix  = '$(tokenSuffix)'
            }

            # Add enforced tokens
            $ConvertTokensInputs.Tokens += @{
              subscriptionId    = '${{ parameters.subscriptionId }}'
              managementGroupId = '${{ parameters.managementGroupId }}'
              tenantId          = '$(ARM_TENANT_ID)'
            }

            # Add local (source control) tokens
            $tokenMap = @{}
            foreach ($token in (Get-ChildItem env: | Where-Object -Property Name -Like "localToken_*")) {
              $tokenMap += @{ $token.Name.Replace('localToken_','','OrdinalIgnoreCase') = $token.value }
            }
            Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
            $ConvertTokensInputs.Tokens += $tokenMap

            # Swap 'namePrefix' token if empty and provided as a Azure DevOps variable
            if([String]::IsNullOrEmpty($ConvertTokensInputs.Tokens['namePrefix'])){
              Write-Verbose 'Using [namePrefix] token from Azure DevOps Variable Groups' -Verbose
              $ConvertTokensInputs.Tokens['namePrefix'] = "$(TOKEN_NAMEPREFIX)"
            }

            # Add custom tokens (passed in via the pipeline)
            if(-not [String]::IsNullOrEmpty('${{ parameters.customTokens }}')) {
              $customTokens = '${{ parameters.customTokens }}' | ConvertFrom-Json -AsHashTable
              Write-Verbose ('Using custom parameter file tokens [{0}]' -f ($customTokens.Keys -join ', ')) -Verbose
              $ConvertTokensInputs.Tokens += $customTokens
            }

            Write-Verbose "Convert Tokens Input:`n $($ConvertTokensInputs | ConvertTo-Json -Depth 10)" -Verbose

            # Invoke Token Replacement Functionality [For Module]
            $null = Convert-TokensInFileList @ConvertTokensInputs

      # [Validation] task(s)
      #---------------------
      - task: AzurePowerShell@5
        displayName: 'Validate template file via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          ScriptType: InlineScript
          pwsh: true
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'Test-TemplateDeployment.ps1')

            # Fetching parameters
            $location = '${{ parameters.location }}'
            $subscriptionId = '${{ parameters.subscriptionId }}'
            $managementGroupId = '${{ parameters.managementGroupId }}'

            # Resolve template file path
            $moduleTestFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' '$(moduleTestFilePath)'

            # Determine possible parameters depending on file type
            if ((Split-Path $moduleTestFilePath -Extension) -eq '.bicep') {
                $moduleTemplateContent = bicep build $moduleTestFilePath --stdout | ConvertFrom-Json -AsHashtable
                $moduleTemplatePossibleParameters = $moduleTemplateContent.parameters.Keys
            } else {
                $moduleTemplatePossibleParameters = ((Get-Content $moduleTestFilePath -Raw) | ConvertFrom-Json -AsHashtable).parameters.keys
            }

            # ----------- #
            # INVOKE TEST #
            # ----------- #
            # Building input object
            $functionInput = @{
                TemplateFilePath     = $moduleTestFilePath
                Location             = $location
                SubscriptionId       = $subscriptionId
                ManagementGroupId    = $managementGroupId
                AdditionalParameters = @{}
            }

            # Handle additional parameters
            if (-not [System.Convert]::ToBoolean('$(enableDefaultTelemetry)') -and ($moduleTemplatePossibleParameters.Keys -contains 'enableDefaultTelemetry')) {
                $functionInput['additionalParameters'] += @{
                    enableDefaultTelemetry = [System.Convert]::ToBoolean('$(enableDefaultTelemetry)')
                }
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Test-TemplateDeployment @functionInput -Verbose

      # [Deployment] task(s)
      #---------------------
      - task: AzurePowerShell@5
        name: deployModule
        displayName: 'Deploy template file via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          pwsh: true
          ScriptType: InlineScript
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'New-TemplateDeployment.ps1')

            # Fetching parameters
            $location = '${{ parameters.location }}'
            $subscriptionId = '${{ parameters.subscriptionId }}'
            $managementGroupId = '${{ parameters.managementGroupId }}'

            # Resolve template file path
            $moduleTestFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' '$(moduleTestFilePath)'

            # Determine possible parameters depending on file type
            if ((Split-Path $moduleTestFilePath -Extension) -eq '.bicep') {
                $moduleTemplateContent = bicep build $moduleTestFilePath --stdout | ConvertFrom-Json -AsHashtable
                $moduleTemplatePossibleParameters = $moduleTemplateContent.parameters.Keys
            } else {
                $moduleTemplatePossibleParameters = ((Get-Content $moduleTestFilePath -Raw) | ConvertFrom-Json -AsHashtable).parameters.keys
            }

            # ----------- #
            # INVOKE TEST #
            # ----------- #

            # Building input object
            $functionInput = @{
                TemplateFilePath     = $moduleTestFilePath
                Location             = $location
                SubscriptionId       = $subscriptionId
                ManagementGroupId    = $managementGroupId
                doNotThrow           = $true
                AdditionalParameters = @{}
            }

            # Handle additional parameters
            if (-not [System.Convert]::ToBoolean('$(enableDefaultTelemetry)') -and ($moduleTemplatePossibleParameters.Keys -contains 'enableDefaultTelemetry')) {
                $functionInput['additionalParameters'] += @{
                    enableDefaultTelemetry = [System.Convert]::ToBoolean('$(enableDefaultTelemetry)')
                }
            }

            Write-Verbose 'Invoke task with' -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            # Invoke deployment
            $res = New-TemplateDeployment @functionInput -Verbose

            # Get deployment name
            $deploymentNames = $res.DeploymentNames | ConvertTo-Json -Compress
            Write-Verbose "Deployment name(s) [$deploymentNames]" -Verbose
            Write-Host "##vso[task.setvariable variable=deploymentNames]$deploymentNames"
            Write-Host "##vso[task.setvariable variable=deploymentNames;isOutput=true]$deploymentNames"

            # Populate further outputs
            $deploymentOutputHashTable=@{}

            foreach ($outputKey in $res.deploymentOutput.Keys) {
              Write-Output ('##vso[task.setvariable variable={0}]{1}' -f $outputKey, $res.deploymentOutput[$outputKey].Value)
              $deploymentOutputHashTable.add($outputKey,$res.deploymentOutput[$outputKey].Value)
            }

            $deploymentOutput = $deploymentOutputHashTable | ConvertTo-Json -Compress -Depth 100
            Write-Verbose "Deployment output: $deploymentOutput" -Verbose

            if ($res.ContainsKey('exception')) {
              # Happens only if there is an exception
              throw $res.exception
            }

      # [Removal] task(s)
      #------------------
      - task: AzurePowerShell@5
        displayName: 'Remove deployed resources via [${{ parameters.serviceConnection }}]'
        condition: and(succeededOrFailed(), eq('${{ parameters.removeDeployment }}', 'True'), not(eq(variables['deploymentNames'],'')), not(startsWith(variables['deploymentNames'], 'variables[' )))
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          ScriptType: InlineScript
          failOnStandardError: false
          pwsh: true
          inline: |
            # Load used function
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')

            $functionInput = @{
              TemplateFilePath  = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' '$(moduleTestFilePath)'
              SubscriptionId    = '${{ parameters.subscriptionId }}'
              ManagementGroupId = '${{ parameters.managementGroupId }}'
              DeploymentNames   = '$(deploymentNames)' | ConvertFrom-Json
            }

            Write-Verbose 'Invoke task with' -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Initialize-DeploymentRemoval @functionInput
